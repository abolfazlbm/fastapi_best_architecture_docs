import{_ as i,c as a,e,o as t}from"./app-BmTAx6X_.js";const h={};function n(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>此教程仅适用于 PostgreSQL 用户</p></div><p>fba 支持 MySQL、PostgreSQL 两种数据库，默认配置使用 MySQL</p><p>如果本地未安装 PostgreSQL，你可以使用以下命令创建 Docker 镜像</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">docker</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> run</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -d</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --name</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> fba_postgres</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> --restart</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> always</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -e</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> POSTGRES_DB=&#39;fba&#39;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -e</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> POSTGRES_PASSWORD=&#39;123456&#39;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -e</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> TZ=&#39;Asia/Shanghai&#39;</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -v</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> fba_postgres:/var/lib/postgresql/data</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -p</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> 5432:5432</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> postgres:16</span></span></code></pre></div><h2 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置"><span>环境配置</span></a></h2><p>PostgreSQL 与 MySQL 在用户名、端口号等方面有所不同，如果你使用上面的命令创建了 Docker 镜像，需修改 <code>.env</code> 部分配置如下，否则，请根据 PostgreSQL 配置进行修改</p><div class="language-dotenv" data-highlighter="shiki" data-ext="dotenv" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-dotenv"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># Database</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">DATABASE_TYPE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;postgresql&#39;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">DATABASE_HOST</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">DATABASE_PORT</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">5432</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">DATABASE_USER</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;postgres&#39;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">DATABASE_PASSWORD</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;123456&#39;</span></span></code></pre></div><h2 id="解耦" tabindex="-1"><a class="header-anchor" href="#解耦"><span>解耦</span></a></h2><p>在实际项目开发中，几乎不会存在同时兼容多种数据库的情况，我们在模型中使用 <code>with_variant</code> 尽可能的兼容 MySQL 和 PostgreSQL，例如：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">remark: Mapped[</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">str</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> |</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> mapped_column</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">LONGTEXT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">().</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;" class="highlighted-word">with_variant</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">TEXT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;postgresql&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">))  </span></span></code></pre></div><ul><li>删除 <code>with_variant</code> 相关代码并且仅保留数据库对应的类型</li><li>删除 <code>backend/core/conf.py</code> 文件中的 <code>DATABASE_TYPE</code> 及其相关的调用代码</li><li>删除 <code>.env_example</code> 和 <code>.env</code> 文件中的 <code>DATABASE_TYPE</code></li><li>更新 <code>backend/templates/py/model.jinja</code> 文件中的 <code>database_type</code> 相关代码</li><li>删除 <code>backend/sql</code> 目录中的 <code>mysql</code> 或 <code>postgresql</code> 文件夹</li><li>删除 <code>docker-compose.yml</code> 文件中的 <code>fba_mysql</code> 或 <code>fba_postgres</code> 容器脚本</li></ul>`,11)]))}const p=i(h,[["render",n]]),r=JSON.parse('{"path":"/backend/reference/db.html","title":"切换数据库","lang":"zh-CN","frontmatter":{"title":"切换数据库","description":"提示 此教程仅适用于 PostgreSQL 用户 fba 支持 MySQL、PostgreSQL 两种数据库，默认配置使用 MySQL 如果本地未安装 PostgreSQL，你可以使用以下命令创建 Docker 镜像 环境配置 PostgreSQL 与 MySQL 在用户名、端口号等方面有所不同，如果你使用上面的命令创建了 Docker 镜像，需修改 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"切换数据库\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/backend/reference/db.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"切换数据库"}],["meta",{"property":"og:description","content":"提示 此教程仅适用于 PostgreSQL 用户 fba 支持 MySQL、PostgreSQL 两种数据库，默认配置使用 MySQL 如果本地未安装 PostgreSQL，你可以使用以下命令创建 Docker 镜像 环境配置 PostgreSQL 与 MySQL 在用户名、端口号等方面有所不同，如果你使用上面的命令创建了 Docker 镜像，需修改 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"readingTime":{"minutes":1.03,"words":309},"git":{"createdTime":1734535676000},"autoDesc":true,"filePathRelative":"backend/reference/db.md","headers":[],"categoryList":[{"id":"b43fdd","sort":10000,"name":"backend"},{"id":"4b6340","sort":10002,"name":"reference"}],"bulletin":true}');export{p as comp,r as data};
